<?php

//error_reporting(E_ALL);
//ini_set("display_errors", 1);

/**
   * BlinkCamera
   *
   * Unofficial php class API of the Blink Wire-Free HD Home Monitoring & Alert System.
   * thanks to https://github.com/MattTW/BlinkMonitorProtocol
   *
   * @author twitter:@havok
   * @version 2018.11.30
   *
   */

class BlinkCamera {

  public $_version = '0.1';
  public $error = null;
  public $_isAuth = false;
  public $_data = array();

  //authentication:
  protected $_login;
  protected $_password;

  protected $_APILoginUrl = 'https://rest.prod.immedia-semi.com/login';
  protected $_APIHost = 'prod.immedia-semi.com';

  protected $_accessToken;
  protected $_region;
  protected $_networkId;

  public function Disarm()
  {
    //Disarm the given network (stop recording/reporting motion events)
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, "https://rest.".$this->_region.".immedia-semi.com/network/".$this->_networkId."/disarm");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "--compressed");
    curl_setopt($ch, CURLOPT_POST, 1);

    $headers = array();
    $headers[] = "Host: ".$this->_APIHost;
    $headers[] = "Token_auth: ".$this->_accessToken;
    $headers[] = "Content-Type: application/x-www-form-urlencoded";
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        $this->error = curl_error($ch);
        return false;
    }
    curl_close ($ch);
    return true;
  }

  public function Arm()
  {
    //Arm the given network (start recording/reporting motion events)
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, "https://rest.".$this->_region.".immedia-semi.com/network/".$this->_networkId."/arm");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "--compressed");
    curl_setopt($ch, CURLOPT_POST, 1);

    $headers = array();
    $headers[] = "Host: ".$this->_APIHost;
    $headers[] = "Token_auth: ".$this->_accessToken;
    $headers[] = "Content-Type: application/x-www-form-urlencoded";
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        $this->error = curl_error($ch);
        return false;
    }
    curl_close ($ch);
    return true;
  }

  public function homescreen()
  {
    //Return information displayed on the home screen of the mobile client
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, "https://rest.".$this->_region.".immedia-semi.com/homescreen");
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");

    curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');

    $headers = array();
    $headers[] = "Host: ".$this->_APIHost;
    $headers[] = "Token_auth: ".$this->_accessToken;
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
      $this->error = curl_error($ch);
      return false;
    }
    curl_close ($ch);

    return $result;
  }

  protected function auth()
  {
    /* Connexion */
    // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $this->_APILoginUrl);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, "{ \"password\" : \"$this->_password\", \"client_specifier\" : \"iPhone 9.2 | 2.2 | 222\", \"email\" : \"$this->_login\" }");
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');

    $headers = array();
    $headers[] = "Host: ".$this->_APIHost;
    $headers[] = "Content-Type: application/json";
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

    $result = curl_exec($ch);
    if (curl_errno($ch)) {
        $this->error = curl_error($ch);
        return false;
    }
    curl_close ($ch);

    $params = null;
    $params = json_decode($result, true);

    $this->_accessToken = $params['authtoken']['authtoken'];
    $this->_region = key($params['region']);
    $this->_networkId = key($params['networks']);

    $this->_isAuth = true;
    return true;
  }

  function __construct($login, $password)
  {
      $this->_login = $login;
      $this->_password = $password;

      if ($this->auth() == false)
      {
        return $this->error;
      }
  }

}
?>
